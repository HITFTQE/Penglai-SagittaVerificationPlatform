;=====================================================================================================================
;===========本配置文件可以用作脚本demo的环境测试，如果需要使用此配置来运行demo测试，需要额外增加以下两步配置：       =
;1. 在生成脚本之后，需要配置 DATA_BYPASS_PROJECT 环境变量宏                                                   =
;=====================================================================================================================
;====================================================================================ENV_GENERAL===================================================================================================================================
;这一section设置环境通用选项,需要设定选项包括
;prj_path:指定当前工程路径(ver存放路径)
;author:环境作者
;env_name:环境名称
;env_level:指定环境等级,只能选择st/it/bt/ut，选择其他时脚本报错并退出
;rtl_top_name:当前环境验证的dut对应的module名称
;u_rtl_top_name:当前环境验证的dut对应的instance名称
;rtl_list:当前环境验证的dut对应的filelist
;env_parameter:指定当前环境是否带有parameter，为参数化环境，格式一定是
;----e.g.
;----env_parameter = {"ENV_AA":1,"ENV_BC":2}
;----在不指定env_parameter或者指定env_parameter = {}时，认为对应环境为不带参数agent
;=================================================================================================================================================================================================================================
[ENV_GENERAL]
prj_path = ./prj_gen_env/trunk/digital_data
author = xxx
env_name = data_bypass
env_level = ut
rtl_top_name = data_bypass
u_rtl_top_name = U_DATA_BYPASS
rtl_list = $DATA_BYPASS_PROJECT/data_bypass.lst

;=================================================================================================================================================================================================================================
;下面声明所有接口,每个接口一个section,section名称为接口的agent名称
;每个section包括以下option
;agent_mode:当前接口的例化模式,可选[master,only_monitor]
;----当接口设置为master时,sequencer和driver,monitor均打开
;----当接口设置为only_monitor是,sequencer和driver均关闭,只打开monitor
;instance_by:当前接口在环境中是由自身agent例化还是复用其他agent进行例化,可选[self,???]
;----输入选项为self时,脚本产生接口自身agent并例化到环境中
;----输入选项为其他agent名称时,则脚本不产生agent,只在环境中调用对应agent进行例化,这时候要求这两个agent的interface_list必须一致
;instance_num:指定当前agent在ENV中一共例化多少份,例化一份时此信息可以省略或指定为1,配置信息必须为大于等于1的正整数或者为对应例化列表
;
;agent_interface_list:列出接口的所有信号名称,格式为["input/output   bit  [xx:0]  $signal_name","..."]
;dut_interface_list:列出接口的所有信号对应的DUT接口信号
;----无论是agent_还是dut_, interface_list信号方向描述与DUT module接口list的方向一致
;----要求dut_interface_list(x)和agent_interface_list的信号位置一定是一一对应的，否则脚本自动连线会生成错误环境连线
;----要求多bit接口位宽的lsb一定从0开始
;-------对于 instance_by=self模式，agent_interface_list一定是必须指定的，否则脚本解析报错并退出
;-------对于 instance_by!=self模式，
;-----------对于VIP(脚本在ini中没有找到对应的instance_by agent)需要指定agent_interface_list,
;------------对于非VIP(脚本在ini中没有找到对应的instance_by agent)，agent_interface_list指定是无效的
;-------对于dut_interface_list在 instance_num大于1或为列表时，每一个对应list后缀必须加上对应的序号数字
;-------dut_instance_list(x)可以不止定，此时脚本会报告对应warning，需要后续手动修改环境中dut的例化及对应连线保证环境正确
;
;filelist_path:指定当前agent的路径，只针对instance_by!=self,并且在ini中找不到对应的instance_by agent的agent此配置有效
;----这时候脚本认为当前agent为例化VIP对应agent，不需要脚本自己生成
;-------因此需要对当前agent指定对应的filelist_path，agent_interface_list，及parameter，否则脚本生成环境可能会出错
;-------如果不指定filelist_path，同时脚本在ini中没有找到对应的instance_by agent时，会自动将默认filelist设置为../../../common/agent/{_instanceBy}/{_instanceBy}.f并报告相关warning
;-------另外，对于非VIP(脚本在ini中没有找到对应的instance_by agent),此配置无效
;
;parameter:指定当前agent是否带有parameter，为参数化agent，格式一定是
;----e.g.
;--------parameter = {"DW":64,"AW":32}
;----在不指定parameter或者指定parameter = {}时，认为对应agent为不带参数agent
;----PS: parameter 只有在instance_by=self或VIP(instance_by!=self并且ini中找不到对应的instance_by agent)才有效，同时其他 instance_by=这一个agent 的agent在例化一定时带同样parameter参数的
;----另外，在自动dut连线过程中，会将带paramter参数化的信号位宽声明的PARAMS改为${agent_name}_agent_dec::PARAMS,这里要求parameter和信号名称一定要遵循编码规范，一个大写一个小写，否则可能会改写错误
;channel_id_s:指定当前agent对应的channel_id，如果agent在env中例化不止一份，则指定起始ID，接下来对应的实例化agent脚本会自动加1处理
;----要求给定值一定是非负整数
;----如果没有给定channel_id_s，则脚本默认为0或上一个agent对应id加1处理
;scb_port_sel:指定当前agent在实例化之后，连接scoreboard的预期(exp)侧还是实际(act)侧，配置值只能是 exp或act，配置其他值无效，认为是exp
;----如果不给定scb_port_sel，则脚本默认为exp
;=================================================================================================================================================================================================================================
[data_in]
agent_mode = master
instance_by = self
instance_num = 2
agent_interface_list = [
	    " input bit data_in_valid",
	    " input bit [63:0] data_in_data",
	    ]
dut_interface_list0 = [
	    " input bit data_in_valid",
	    " input bit [63:0] data_in_data",
	    ]
dut_interface_list1 = [
	    " input bit data_in_valid_new",
	    " input bit [63:0] data_in_data_new",
	    ]
channel_id_s = 1
scb_port_sel = "exp"


[data_out]
agent_mode = only_monitor
instance_by = data_in
instance_num = ['org', 'new']
dut_interface_list0 = [
	    " output bit data_out_valid",
	    " output bit [63:0] data_out_data",
	    ]
dut_interface_list1 = [
	    " output bit data_out_valid_new",
	    " output bit [63:0] data_out_data_new",
	    ]
channel_id_s = 1
scb_port_sel = "act"

